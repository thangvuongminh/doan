import mysql.connector
import random

# ------------------------------
# K·∫øt n·ªëi MySQL
# ------------------------------
def get_conn():
    return mysql.connector.connect(
        host="localhost",
        user="root",                   # user trong MySQL
        password="12345",              # m·∫≠t kh·∫©u c·ªßa user
        database="learning2",          # t√™n database
        auth_plugin="mysql_native_password",
        charset="utf8mb4",
        collation="utf8mb4_unicode_ci",
        use_unicode=True
    )

# ------------------------------
# Ki·ªÉm tra sinh vi√™n ƒë√£ l√†m ƒë·ªÅ ch∆∞a
# ------------------------------
def has_attempted(user_id, exam_id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "SELECT COUNT(*) FROM userexams WHERE user_exam_user_id=%s AND user_exam_exam_id=%s",
        (user_id, exam_id)
    )
    attempted = cur.fetchone()[0] > 0
    conn.close()
    return attempted

# ------------------------------
# L·∫•y danh s√°ch c√¢u h·ªèi + ƒë√°p √°n
# ------------------------------
def get_questions(exam_id):
    conn = get_conn()
    cur = conn.cursor(dictionary=True)

    cur.execute("""
        SELECT q.question_id, q.question_text
        FROM examquestions eq
        JOIN questions q ON eq.exam_question_question_id = q.question_id
        WHERE eq.exam_question_exam_id=%s
    """, (exam_id,))
    questions = cur.fetchall()

    # L·∫•y ƒë√°p √°n cho t·ª´ng c√¢u h·ªèi
    for q in questions:
        cur.execute("""
            SELECT answer_id, answer_text, is_correct
            FROM answers
            WHERE answer_question_id=%s
        """, (q['question_id'],))
        q['answers'] = cur.fetchall()

    conn.close()
    return questions

# ------------------------------
# Sinh vi√™n l√†m b√†i thi
# ------------------------------
def take_exam(user_id, exam_id):
    if has_attempted(user_id, exam_id):
        print("‚ùå B·∫°n ƒë√£ l√†m ƒë·ªÅ n√†y r·ªìi, kh√¥ng th·ªÉ l√†m l·∫°i.")
        return

    questions = get_questions(exam_id)
    if not questions:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o trong ƒë·ªÅ thi.")
        return

    score = 0
    total = len(questions)
    exam_results = []

    for q in questions:
        print(f"\nC√¢u h·ªèi: {q['question_text']}")
        for idx, ans in enumerate(q['answers']):
            print(f"{idx+1}. {ans['answer_text']}")

        # M√¥ ph·ªèng random ch·ªçn ƒë√°p √°n
        chosen = random.choice(q['answers'])
        print(f"üëâ Tr·∫£ l·ªùi: {chosen['answer_text']}")

        # L∆∞u k·∫øt qu·∫£ t·ª´ng c√¢u
        exam_results.append((q['question_id'], chosen['answer_id']))

        if chosen['is_correct']:
            score += 1

    final_score = round(score / total * 10, 2)

    # ------------------------------
    # L∆∞u v√†o DB
    # ------------------------------
    try:
        conn = get_conn()
        cur = conn.cursor()

        # L∆∞u ƒëi·ªÉm t·ªïng
        cur.execute("""
            INSERT INTO userexams(user_exam_user_id, user_exam_exam_id, user_exam_score)
            VALUES (%s, %s, %s)
        """, (user_id, exam_id, final_score))
        user_exam_id = cur.lastrowid

        # L∆∞u t·ª´ng c√¢u tr·∫£ l·ªùi
        for q_id, ans_id in exam_results:
            cur.execute("""
                INSERT INTO examresults(exam_result_user_exam_id, exam_result_question_id, exam_result_selected_answer_id)
                VALUES (%s, %s, %s)
            """, (user_exam_id, q_id, ans_id))

        conn.commit()
        print(f"\n‚úÖ K·∫øt qu·∫£: {score}/{total} ƒë√∫ng ‚Üí ƒêi·ªÉm: {final_score}")

    except Exception as e:
        print("L·ªói khi l∆∞u k·∫øt qu·∫£:", e)
        conn.rollback()
    finally:
        conn.close()

# ------------------------------
# Ch·∫°y th·ª≠
# ------------------------------
if __name__ == "__main__":
    user_id = 1   # ID sinh vi√™n (trong b·∫£ng users)
    exam_id = 1   # ID ƒë·ªÅ thi (trong b·∫£ng exams)
    print("B·∫Øt ƒë·∫ßu l√†m b√†i thi {exam_id} cho user {user_id}...\n")
    take_exam(user_id, exam_id)
